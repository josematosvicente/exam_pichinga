openapi: 3.0.0
info:
  version: 1.0.0
  title: Swagger Product
  description: A sample API that uses a clientstore as an example to demonstrate features in the OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: http://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://clientstore.swagger.io/api
paths:
  /products:
    get:
      tags:
        - PRODUCT
      summary: Returns all products from the system that the user has access to
      description: Returns all products from the system that the user has access to
      operationId: findProducts
      responses:
        '200':
          description: Product response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - PRODUCT
      summary: Creates a new product in the store.  Duplicates are not allowed
      description: Creates a new product in the store.  Duplicates are not allowed
      operationId: addProduct
      requestBody:
        description: Product to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '200':
          description: product response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{id}:
    get:
      tags:
        - PRODUCT
      summary: Returns a product based on a single ID
      description: Returns a product based on a single ID
      operationId: find product by id
      parameters:
        - name: id
          in: path
          description: ID of product to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: product response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - PRODUCT
      summary: Update product
      description: This can only be done by the logged in product.
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          description: ID of product to fetch
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - PRODUCT
      summary: deletes a single product based on the ID supplied
      description: deletes a single product based on the ID supplied
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: ID of product to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: product deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Product:
      allOf:
        - $ref: '#/components/schemas/NewProduct'
        - type: object
          required:
            - id
          properties:
            id:
              type: "string"

    NewProduct:
      allOf:
        - type: object
          required:
            - id
          properties:
            name:
              type: "string"
            type:
              type: "string"
            category:
              type: "string"
            commission:
              type: "number"
            limitDeposit:
              type: "number"
            limitWithdrawal:
              type: "number"
            line:
              type: "number"

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
