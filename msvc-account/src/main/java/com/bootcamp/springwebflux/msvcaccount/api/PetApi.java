/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bootcamp.springwebflux.msvcaccount.api;

import com.bootcamp.springwebflux.msvcaccount.models.Pet;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-03T12:24:46.812721600-05:00[America/Bogota]")
@Validated
@Api(value = "pet", description = "the pet API")
public interface PetApi {

    /**
     * POST /pet : Add a Pet
     * Add a single Pet
     *
     * @param pet  (optional)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "Add a Pet", nickname = "addPet", notes = "Add a single Pet", tags={ "Pet APIs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/pet",
        consumes = { "application/json" }
    )
    Mono<ResponseEntity<Void>> addPet(@ApiParam(value = "") @Valid @RequestBody(required = false) Mono<Pet> pet, @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange);


    /**
     * GET /pet : Retrieve all Pets
     * Returns a collection of Pet
     *
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "Retrieve all Pets", nickname = "getPets", notes = "Returns a collection of Pet", response = Pet.class, responseContainer = "List", tags={ "Pet APIs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Pet.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pet",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<Flux<Pet>>> getPets(@springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange);

}
