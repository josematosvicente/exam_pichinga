/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bootcamp.springwebflux.msvcclient.api;

import com.bootcamp.springwebflux.msvcclient.models.ClientDTO;
import com.bootcamp.springwebflux.msvcclient.models.NewClientDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;


@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-03T12:30:00.932411800-05:00[America/Bogota]")
@Valid
@Api(value = "clients", description = "the clients API")
public interface ClientsApi {

    /**
     * POST /clients : Creates a new client in the store.  Duplicates are not allowed
     * Creates a new client in the store.  Duplicates are not allowed
     *
     * @param newClient Client to add to the store (required)
     * @return client response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Creates a new client in the store.  Duplicates are not allowed", nickname = "addClient", notes = "Creates a new client in the store.  Duplicates are not allowed", response = ClientDTO.class, tags={ "CLIENT", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "client response", response = ClientDTO.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    Mono<ResponseEntity<ClientDTO>> addClient(@ApiParam(value = "Client to add to the store", required = true) @Valid @RequestBody Mono<NewClientDTO> newClient, @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange);


    /**
     * DELETE /clients/{id} : deletes a single client based on the ID supplied
     * deletes a single client based on the ID supplied
     *
     * @param id ID of client to delete (required)
     * @return client deleted (status code 204)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "deletes a single client based on the ID supplied", nickname = "deleteClient", notes = "deletes a single client based on the ID supplied", tags={ "CLIENT", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "client deleted"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/clients/{id}",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<Void>> deleteClient(@ApiParam(value = "ID of client to delete", required = true) @PathVariable("id") String id, @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange);


    /**
     * GET /clients/{id} : Returns a user based on a single ID, if the user does not have access to the client
     * Returns a user based on a single ID, if the user does not have access to the client
     *
     * @param id ID of client to fetch (required)
     * @return client response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Returns a user based on a single ID, if the user does not have access to the client", nickname = "findClientById", notes = "Returns a user based on a single ID, if the user does not have access to the client", response = ClientDTO.class, tags={ "CLIENT", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "client response", response = ClientDTO.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/{id}",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<ClientDTO>> findClientById(@ApiParam(value = "ID of client to fetch", required = true) @PathVariable("id") String id, @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange);


    /**
     * GET /clients : Returns all clients from the system that the user has access to
     * Returns all clients from the system that the user has access to
     *
     * @return client response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Returns all clients from the system that the user has access to", nickname = "findClients", notes = "Returns all clients from the system that the user has access to", response = ClientDTO.class, responseContainer = "List", tags={ "CLIENT", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "client response", response = ClientDTO.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<Flux<ClientDTO>>> findClients(@springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange);

}
