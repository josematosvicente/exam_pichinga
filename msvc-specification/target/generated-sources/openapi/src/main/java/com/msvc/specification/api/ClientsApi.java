/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.msvc.specification.api;

import com.msvc.specification.api.dto.ClientDto;
import com.msvc.specification.api.dto.ErrorDto;
import com.msvc.specification.api.dto.NewClientDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-06T18:16:27.790586600-05:00[America/Lima]")
@Validated
@Api(value = "clients", description = "the clients API")
public interface ClientsApi {

    /**
     * POST /clients : Creates a new client in the bank.  Duplicates are not allowed
     * Creates a new client in the bank.  Duplicates are not allowed
     *
     * @param newClientDto ClientDto to add to the bank (required)
     * @return client response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Creates a new client in the bank.  Duplicates are not allowed", nickname = "addClient", notes = "Creates a new client in the bank.  Duplicates are not allowed", response = ClientDto.class, tags={ "CLIENT", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "client response", response = ClientDto.class),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    Mono<ResponseEntity<ClientDto>> addClient(@ApiParam(value = "ClientDto to add to the bank", required = true) @Valid @RequestBody Mono<NewClientDto> newClientDto, @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange);


    /**
     * DELETE /clients/{id} : deletes a single client based on the ID supplied
     * deletes a single client based on the ID supplied
     *
     * @param id ID of client to delete (required)
     * @return client deleted (status code 204)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "deletes a single client based on the ID supplied", nickname = "deleteClient", notes = "deletes a single client based on the ID supplied", tags={ "CLIENT", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "client deleted"),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/clients/{id}",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<Void>> deleteClient(@ApiParam(value = "ID of client to delete", required = true) @PathVariable("id") String id, @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange);


    /**
     * GET /clients/{id} : Returns a user based on a single ID, if the user does not have access to the client
     * Returns a user based on a single ID, if the user does not have access to the client
     *
     * @param id ID of client to fetch (required)
     * @return client response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Returns a user based on a single ID, if the user does not have access to the client", nickname = "findClientById", notes = "Returns a user based on a single ID, if the user does not have access to the client", response = ClientDto.class, tags={ "CLIENT", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "client response", response = ClientDto.class),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/{id}",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<ClientDto>> findClientById(@ApiParam(value = "ID of client to fetch", required = true) @PathVariable("id") String id, @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange);


    /**
     * GET /clients : Returns all clients from the system that the user has access to
     * Returns all clients from the system that the user has access to
     *
     * @return client response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Returns all clients from the system that the user has access to", nickname = "findClients", notes = "Returns all clients from the system that the user has access to", response = ClientDto.class, responseContainer = "List", tags={ "CLIENT", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "client response", response = ClientDto.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<Flux<ClientDto>>> findClients(@springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange);


    /**
     * PUT /clients/{id} : Update client
     * This can only be done by the logged in client.
     *
     * @param id ID of product to fetch (required)
     * @param clientDto Update an existent product (optional)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Update client", nickname = "updateClient", notes = "This can only be done by the logged in client.", tags={ "CLIENT", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clients/{id}",
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    Mono<ResponseEntity<Void>> updateClient(@ApiParam(value = "ID of product to fetch", required = true) @PathVariable("id") String id,@ApiParam(value = "Update an existent product") @Valid @RequestBody(required = false) Mono<ClientDto> clientDto, @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange);

}
